"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require('../fs');

var _require = require('path'),
    join = _require.join;

var Bluebird = require('bluebird');
/**
 * Get the size of a folder or a file.
 *
 * This function returns the actual file size of the folder (size), not the allocated space on disk (size on disk).
 * For more details between the difference, check this link:
 * https://www.howtogeek.com/180369/why-is-there-a-big-difference-between-size-and-size-on-disk/
 *
 * @param {string} path path to the file or the folder.
 */


function getSize(_x) {
  return _getSize.apply(this, arguments);
}

function _getSize() {
  _getSize = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path) {
    var stat, list;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fs.lstat(path);

          case 2:
            stat = _context2.sent;

            if (!stat.isDirectory()) {
              _context2.next = 8;
              break;
            }

            _context2.next = 6;
            return fs.readdir(path);

          case 6:
            list = _context2.sent;
            return _context2.abrupt("return", Bluebird.resolve(list).reduce( /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(prev, curr) {
                var currPath, s;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        currPath = join(path, curr);
                        _context.next = 3;
                        return fs.lstat(currPath);

                      case 3:
                        s = _context.sent;

                        if (!s.isDirectory()) {
                          _context.next = 10;
                          break;
                        }

                        _context.t0 = prev;
                        _context.next = 8;
                        return getSize(currPath);

                      case 8:
                        _context.t1 = _context.sent;
                        return _context.abrupt("return", _context.t0 + _context.t1);

                      case 10:
                        return _context.abrupt("return", prev + s.size);

                      case 11:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2, _x3) {
                return _ref.apply(this, arguments);
              };
            }(), 0));

          case 8:
            return _context2.abrupt("return", stat.size);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSize.apply(this, arguments);
}

module.exports = getSize;